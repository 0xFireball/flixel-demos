package;

import flash.geom.Matrix;
import flash.display.BitmapData;
import flixel.util.FlxColor;
import flixel.util.FlxRandom;

class Reg
{
	static public var PS:PlayState;
	
	/**
	 * Returns a 24px by 8px image that is used as the tileset graphic.
	 */
	static public var tileImage(get, null):BitmapData;
	
	static public function get_tileImage():BitmapData
	{
		var tileset:BitmapData = new BitmapData( 8 * 3, 8, false, FlxColor.WHITE );
		tileset.draw( new BitmapData( 8, 8, false, FlxColor.BLACK ), new Matrix( 1, 0, 0, 1, 8, 0 ) );
		return tileset;
	}
	
	/**
	 * Returns an enemy graphic, just a square with eyes.
	 */
	static public var enemyImage(get, null):BitmapData;
	
	static public function get_enemyImage():BitmapData
	{
		var enemy:BitmapData = new BitmapData( 6, 6, false, FlxColor.BLACK );
		var eye:BitmapData = new BitmapData( 1, 2, false, FlxColor.WHITE );
		enemy.draw( eye, new Matrix( 1, 0, 0, 1, 1, 1 ) );
		enemy.draw( eye, new Matrix( 1, 0, 0, 1, 4, 1 ) );
		
		return enemy;
	}
	
	/**
	 * Whether or not to generate a level procedurally.
	 */
	static public var randomMode:Bool = false;
	
	/**
	 * The X position of the goal generated by generateRandomLevel(). It's always 245.
	 */
	static public var goalX:Int = 245;
	
	/**
	 * The Y position of the goal generated by generateRandomLevel(). Somewhere between 3 and 203.
	 */
	static public var goalY:Int = 0;
	
	/**
	 * The X position at which enemies will spawn, as generated by generateRandomLevel().
	 */
	static public var enemySpawnX:Int = 0;
	
	/**
	 * The Y position at which enemies will spawn, as generated by generateRandomLevel().
	 */
	static public var enemySpawnY:Int = 0;
	
	static public function generateRandomLevel():Array<Int>
	{
		// enemy spawn x/y should be tileposition + 4
		// enemy spawn y/x should be -20
		// goaly should be tileposition - 5
		var levelArray:Array<Int> = new Array<Int>();
		var useX:Bool = FlxRandom.chanceRoll();
		var lastX:Int = 0;
		var lastY:Int = 0;
		var goalX:Int = 30;
		var goalY:Int = 0;
		var reachedGoal = false;
		
		for ( i in 0...1200 )
		{
			levelArray.push( 1 );
		}
		
		if ( useX )
		{
			lastX = FlxRandom.intRanged( 1, 8 );
			lastY = 0;
		}
		else
		{
			lastX = 0;
			lastY = FlxRandom.intRanged( 1, 29 );
		}
		
		var upWeight:Float = 0;
		var downWeight:Float = 0;
		var leftWeight:Float = 0;
		var rightWeight:Float = 0;
		
		while ( !reachedGoal )
		{
			if ( lastX < 4 ) {
				upWeight = 0.01;
			} else {
				upWeight = 0.3;
			}
			
			if ( lastX > 26 ) {
				downWeight = 0.01;
			} else {
				downWeight = 0.3;
			}
			
			if ( lastY < 4 ) {
				leftWeight = 0.01;
			} else {
				leftWeight = 0.1;
			}
			
			if ( lastY > 
		}
		
		return levelArray;
	}
}